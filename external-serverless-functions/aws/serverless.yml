service: nuraweb-files

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  timeout: 30 # Increase timeout to 30 seconds
  
  # Enable binary media types for API Gateway
  apiGateway:
    binaryMediaTypes:
      - '*/*'
      - 'multipart/form-data'
      - 'image/*'
      - 'video/*'
      - 'audio/*'
      - 'application/pdf'
      - 'application/octet-stream'
  
  environment:
    ALLOWED_ORIGIN: ${env:ALLOWED_ORIGIN}
    JWT_SECRET: ${env:JWT_SECRET}
    ADMIN_USERNAME: ${env:ADMIN_USERNAME}
    ADMIN_PASSWORD: ${env:ADMIN_PASSWORD}
    AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
    MAX_FILE_SIZE: ${env:MAX_FILE_SIZE}
    ALLOWED_FILE_TYPES: ${env:ALLOWED_FILE_TYPES}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListBucket
        - s3:HeadObject
      Resource:
        - "arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}"
        - "arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*"

functions:
  auth-login:
    handler: auth-login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origin: ${env:ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  auth-verify:
    handler: auth-verify.handler
    events:
      - http:
          path: auth/verify
          method: get
          cors:
            origin: ${env:ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-list:
    handler: files-list.handler
    events:
      - http:
          path: files
          method: get
          cors:
            origin: ${env:ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-upload:
    handler: files-upload.handler
    timeout: 30
    events:
      - http:
          path: files/upload
          method: post
          cors:
            origin: ${env:ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-delete:
    handler: files-delete.handler
    events:
      - http:
          path: files/{id}
          method: delete
          cors:
            origin: ${env:ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    host: localhost
    cors: true
  dotenv:
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
